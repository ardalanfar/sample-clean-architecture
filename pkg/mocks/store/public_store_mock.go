// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract/public_store.go

// Package mocks is a generated GoMock package.
package storemock

import (
	entity "Farashop/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPublicStore is a mock of PublicStore interface.
type MockPublicStore struct {
	ctrl     *gomock.Controller
	recorder *MockPublicStoreMockRecorder
}

// MockPublicStoreMockRecorder is the mock recorder for MockPublicStore.
type MockPublicStoreMockRecorder struct {
	mock *MockPublicStore
}

// NewMockPublicStore creates a new mock instance.
func NewMockPublicStore(ctrl *gomock.Controller) *MockPublicStore {
	mock := &MockPublicStore{ctrl: ctrl}
	mock.recorder = &MockPublicStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicStore) EXPECT() *MockPublicStoreMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockPublicStore) Login(ctx context.Context, user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockPublicStoreMockRecorder) Login(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockPublicStore)(nil).Login), ctx, user)
}

// MemberValidation mocks base method.
func (m *MockPublicStore) MemberValidation(ctx context.Context, user entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberValidation", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberValidation indicates an expected call of MemberValidation.
func (mr *MockPublicStoreMockRecorder) MemberValidation(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberValidation", reflect.TypeOf((*MockPublicStore)(nil).MemberValidation), ctx, user)
}

// Register mocks base method.
func (m *MockPublicStore) Register(ctx context.Context, user entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockPublicStoreMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPublicStore)(nil).Register), ctx, user)
}
